# LiveKit Egress configuration for recording and streaming
# Note: Egress can run as a deployment or on-demand
# Running as deployment ensures fast startup for recordings

replicaCount: 8

# Egress configuration
egress:
  log_level: info
  health_port: 8080
  prometheus_port: 7889
  
  # LiveKit server connection - credentials from Kubernetes secret
  api_key_secret:
    name: livekit-keys-file
    key: keys.yaml
  api_secret_secret:
    name: livekit-keys-file
    key: keys.yaml
  # Domain configuration
  domain: livekit-demo.cloudportal.app
  # WebSocket URL - should be constructed as wss://livekit.<domain> but kept hardcoded for compatibility
  ws_url: wss://livekit.livekit-demo.cloudportal.app
  
  # Redis configuration - Using Bitnami Redis cluster in livekit namespace
  redis:
    # Redis cluster addresses - LiveKit requires individual node addresses for cluster mode
    cluster_addresses:
      - redis-cluster-0.redis-cluster-headless.livekit.svc.cluster.local:6379
      - redis-cluster-1.redis-cluster-headless.livekit.svc.cluster.local:6379
      - redis-cluster-2.redis-cluster-headless.livekit.svc.cluster.local:6379
      - redis-cluster-3.redis-cluster-headless.livekit.svc.cluster.local:6379
      - redis-cluster-4.redis-cluster-headless.livekit.svc.cluster.local:6379
      - redis-cluster-5.redis-cluster-headless.livekit.svc.cluster.local:6379
    pool_size: 15
    max_idle: 8
    
  # S3 configuration for recordings
  s3:
    endpoint: http://minio.minio-tenant.svc.cluster.local:80
    bucket: livekit-recordings
    region: us-east-1
    # S3 credentials from Kubernetes secret
    access_key_secret:
      name: minio-credentials
      key: access-key
    secret_key_secret:
      name: minio-credentials
      key: secret-key
    force_path_style: true
  
  # File output options  
  file_outputs:
    - s3
    
  # CPU cost configuration
  cpu_cost:
    room_composite_cpu_cost: 3.0
    track_composite_cpu_cost: 2.0
    track_cpu_cost: 1.0
    web_cpu_cost: 3.0

# Image configuration
image:
  repository: livekit/egress
  pullPolicy: IfNotPresent

# Resources for egress pods when spawned
resources:
  requests:
    cpu: 2000m
    memory: 4Gi
  limits:
    cpu: 4000m
    memory: 8Gi

# Security context - egress needs root for chrome/pulseaudio
securityContext: {}

# Service account
serviceAccount:
  create: true
  name: livekit-egress

# Pod annotations
podAnnotations:
  sidecar.istio.io/inject: "false"
  linkerd.io/inject: disabled

# Node selector
nodeSelector: {}

# Tolerations
tolerations: []

# Affinity
affinity: {}

# Ultra-aggressive autoscaling to match ingress configuration
autoscaling:
  enabled: true
  minReplicas: 8
  maxReplicas: 32
  targetCPUUtilizationPercentage: 55
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 25
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 0
      policies:
      - type: Percent
        value: 50
        periodSeconds: 15

# Priority class for egress workloads
priorityClassName: livekit-medium-priority

# Pod anti-affinity for distribution
affinity:
  podAntiAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
    - weight: 100
      podAffinityTerm:
        labelSelector:
          matchExpressions:
          - key: app.kubernetes.io/name
            operator: In
            values:
            - livekit-egress
        topologyKey: kubernetes.io/hostname

# Service monitor for Prometheus
serviceMonitor:
  enabled: true

# Pod disruption budget
podDisruptionBudget:
  enabled: true
  minAvailable: 2